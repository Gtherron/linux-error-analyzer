import shutil
import zipfile
from pathlib import Path

# Define base directory
base_dir = Path("/mnt/data/linux-error-analyzer")

# Create necessary directory structure
dirs = [
    "k8s/helm-chart/templates",
    "monitoring/prometheus",
    "monitoring/grafana",
    "llm-integration",
    "tests",
    "simulations/log-generator"
]

for d in dirs:
    Path(base_dir / d).mkdir(parents=True, exist_ok=True)

# Create placeholder files for each major category
files_content = {
    "k8s/helm-chart/Chart.yaml": """apiVersion: v2
name: linux-error-analyzer
description: Helm chart for deploying Linux Error Analyzer
type: application
version: 0.1.0
appVersion: "1.0"
""",
    "k8s/helm-chart/values.yaml": """replicaCount: 1

image:
  repository: your-repo/linux-error-analyzer
  pullPolicy: IfNotPresent
  tag: "latest"

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
""",
    "k8s/helm-chart/templates/deployment.yaml": """apiVersion: apps/v1
kind: Deployment
metadata:
  name: linux-error-analyzer
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: linux-error-analyzer
  template:
    metadata:
      labels:
        app: linux-error-analyzer
    spec:
      containers:
        - name: analyzer
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          ports:
            - containerPort: 80
""",
    "monitoring/prometheus/prometheus.yml": """global:
  scrape_interval: 15s

scrape_configs:
  - job_name: 'linux-error-analyzer'
    static_configs:
      - targets: ['localhost:9090']
""",
    "monitoring/grafana/dashboards.json": """{
  "dashboard": "Sample Grafana dashboard JSON placeholder"
}
""",
    "llm-integration/llm_client.py": '''import os

def query_llm(prompt):
    # Placeholder for LLM API call (OpenAI or Anthropic)
    print(f"Querying LLM with: {prompt}")
    return {"response": "This is a mock response from LLM"}
''',
    "tests/test_parser.py": '''def test_parser_valid_input():
    log_line = "[ERROR] Network down at 12:01"
    assert "Network" in log_line
''',
    "simulations/log-generator/generate_logs.py": '''import time
import random

errors = [
    "[ERROR] Disk quota exceeded",
    "[WARN] Memory usage high",
    "[INFO] Backup completed",
    "[CRITICAL] Kernel panic"
]

while True:
    with open("/tmp/fake_syslog.log", "a") as f:
        f.write(random.choice(errors) + "\\n")
    time.sleep(2)
'''
}

# Write the files to their appropriate locations
for filepath, content in files_content.items():
    full_path = base_dir / filepath
    with open(full_path, "w") as f:
        f.write(content)

# Confirm file tree creation
str(base_dir)
